""" This is who it's all about. Clients and their needs."""

from django.db import models

# Client information is stored as a cross between clients and info type.
class Client(models.Model):
    """who are you treating?"""
    # every client has a name
    name = models.CharField(max_length=10)

    def __str__(self):
        return self.name

    def __unicode__(self):
        return self.__str__()

class ClientInfoType(models.Model):
    """ represents the kinds of information to keep track of"""
    # each information type has a name
    title = models.CharField(max_length=200) # e.g, "Last visit" or

    def __str__(self):
        return self.title
    def __unicode__(self):
        return self.__str__()

class ClientInfoTypeSignature(ClientInfoType):
    """ Automatically generated by each deliverable"""
    # also include deliverable
    deliverable = models.OneToOneField('Deliverable')

    def __unicode__(self):
        return self.__str__()

class ClientInfo(models.Model):
    """ connects clients and info types. Needs a subclass to make sense"""
    # each piece of information has a client it's referring to
    client = models.ForeignKey(Client, on_delete=models.CASCADE)
    # and a type of information
    info_type = models.ForeignKey(ClientInfoType, on_delete=models.CASCADE)

    def __str__(self):
        return "{0}'s {1}".format(self.client, self.info_type)
    def __unicode__(self):
        return self.__str__()

class ClientInfoDate(ClientInfo):
    """ sometimes that information has a date """
    date = models.DateField(null=True) # the date may not have happened yet

    def __str__(self):
        if self.date:
            return "{0} was {1}".format(self.clientinfo_ptr, self.date)
        return "{0} has not occurred".format(self.clientinfo_ptr)
    def __unicode__(self):
        return self.__str__()
